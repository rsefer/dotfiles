#!/usr/bin/env bash
#
# Initial setup

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

plus () {
  printf "\r  [ \033[0;33m++\033[0m ] $1\n"
}

minus () {
  printf "\r  [ \033[0;31m--\033[0m ] $1\n"
}

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r  [ \033[0;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r  [ \033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_custom_omz_theme () {
  info 'installing custom oh my zsh theme'

  local overwrite_all=false backup_all=false skip_all=false
  src="$DOTFILES_ROOT/zsh/rsefer.zsh-theme"
  dst="$HOME/.oh-my-zsh/custom/themes/rsefer.zsh-theme"
  link_file "$src" "$dst"
}

install_utils () {
  info 'installing utility repos'

  declare -a repos=(
    "git@gitlab.com:rsefer/server-scripts.git"
    "git@gitlab.com:rsefer/data.git"
    "git@gitlab.com:rsefer/git-scripts.git"
    "git@gitlab.com:rsefer/mac-scripts.git"
  )

  UTILS_ROOT="$HOME/utils"

	if [ ! -d "$UTILS_ROOT" ]; then
		mkdir "$UTILS_ROOT"
	fi
  cd "$UTILS_ROOT"
  for repo in "${repos[@]}"
  do
    basename=$(basename "$repo")
    filename=${basename%.*}
    if [ ! -d "$filename" ]; then
  		git clone "$repo"
      success "cloned util $repo"
    else
      success "skipped cloning $repo"
  	fi
  done
}

install_homebrew () {
  if test ! $(which brew)
  then
    info 'installing Homebrew'
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

install_brews_casks () {
  if test $(which brew)
  then
    info 'installing Homebrew brews and casks from Brewfile'
  	cd "$DOTFILES_ROOT/.setup"
  	brew bundle
  fi
}

install_omzsh () {
  info 'installing Oh My Zsh'
  # chsh -s $(which zsh) # changes shell automatically
  sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"
}

echo ''
plus 'initial setup'
echo ''
install_omzsh
echo ''
install_custom_omz_theme
echo ''
install_dotfiles
echo ''

user "install custom utilities? Y/n"
read -n 1 action
case "$action" in
  y )
    install=true;;
  n )
    install=false;;
  * )
    install=true;;
esac
if [ "$install" == "true" ]
then
	install_utils
else
	success 'skipped custom utilities install'
fi

echo ''

user "install Homebrew? Y/n"
read -n 1 action
case "$action" in
  y )
    install=true;;
  n )
    install=false;;
  * )
    install=true;;
esac
if [ "$install" == "true" ]
then
  install_homebrew
  user "install Homebrew brews and casks? Y/n"
  read -n 1 action
  case "$action" in
    y )
      install=true;;
    n )
      install=false;;
    * )
      install=true;;
  esac
  if [ "$install" == "true" ]
  then
    install_brews_casks
  else
    success 'skipped Homebrew brews and casks install'
  fi
else
  success 'skipped Homebrew install'
fi

echo ''
minus 'setup finished'
echo ''

exit 0
