#!/usr/bin/env python
#
# Time logging

import time, sys, os, argparse, csv
import re
from datetime import datetime

hours_file = "/Users/rsefer/Documents/hours.csv"
delimiter = ','

def summarize(clientID = None):
	try:
		with open(hours_file, 'rt') as file:
			reader = csv.reader(file, delimiter = delimiter)
			clients = {}
			raw_table = [['id', 'name', 'minutes', 'timestamp', 'date']]
			raw_table.append(list(map(lambda cell: ''.join(['-'] * len(cell)), raw_table[0])))
			line = 0
			lastClientID = None
			lastDate = None
			for row in reader:
				if line == 0: # skip first row of headers
					line += 1
					continue
				line += 1
				if len(row) == 0:
					continue
				if clientID != None and row[0] != clientID:
					continue
				workingClientID = row[0]
				workingClientName = row[1]
				workingDate = row[4]
				if line > 0:
					if row[0] not in clients:
						clients[row[0]] = {
							'name' : row[1],
							'minutes' : 0
						}
					clients[row[0]]['minutes'] += int(row[2])
					if lastClientID == workingClientID:
						workingClientID = ''
						workingClientName = '|'
					else:
						lastClientID = workingClientID

					workingDate = datetime.strftime(datetime.strptime(row[4], '%Y-%m-%d'), '%Y-%m-%d %a')

					clients[row[0]]['last_tracked'] = workingDate
					if lastDate == workingDate:
						workingDate = ''
					else:
						if line > 1:
							raw_table.append(['', '', '', '', '--------------'])
						lastDate = workingDate
					raw_table.append([workingClientID, workingClientName, row[2], row[3], workingDate])

			print('\n======= SUMMARY =======')
			summary_table = [['id', 'name', 'time', 'last tracked']]
			summary_table.append(list(map(lambda cell: ''.join(['-'] * len(cell)), summary_table[0])))
			combined_hours = 0
			for k, client in clients.items():
				hours = round(client['minutes'] / 60, 2)
				workingLastTrackedRelative = (datetime.now() - datetime.strptime(client['last_tracked'], '%Y-%m-%d %a')).days
				if workingLastTrackedRelative == 0:
					workingLastTrackedRelative = 'today'
				elif workingLastTrackedRelative == 1:
					workingLastTrackedRelative = '1 day ago'
				else:
					workingLastTrackedRelative = f'{workingLastTrackedRelative} days ago'
				summary_table.append([k, client['name'], '{:.2f}'.format(hours) + ' hours', workingLastTrackedRelative])
				combined_hours += hours
			print()
			combined_hours = '{:.2f}'.format(combined_hours)
			print(f'Total hours: {combined_hours}')
			print()
			for row in summary_table:
				print('{:5} {: <25} {: >15} {: >14}'.format(*row))
			print()
	except:
		print('Summary failed to open hours file')
		sys.exit(1)

def clientTime(clientID = None):
	if clientID != None:
		with open(hours_file, 'rt') as file:
			reader = csv.reader(file, delimiter = delimiter)
			minutes = 0
			for row in reader:
				if len(row) == 0:
					continue
				if row[0] != clientID:
					continue
				minutes += int(row[2])
			print(minutes)

def addRow(clientID, clientName, minutes):
	with open(hours_file, 'a+', newline='') as file:
		writer = csv.writer(file)
		writer.writerow([clientID, clientName, re.sub(r'[^-\d]', "", minutes), time.strftime('%H:%M:%S'), time.strftime('%Y-%m-%d')])
		print(f'Added {minutes} minutes to {clientName}')

def clearClient(clientID):
	keep_lines = list()
	remove_lines_count = 0
	summarize(clientID)
	with open(hours_file, 'rt') as file:
		reader = csv.reader(file, delimiter = delimiter)
		for row in reader:
			if len(row) == 0:
				continue
			if row[0] == clientID:
				if remove_lines_count == 0:
					print()
					print(f'Clearing client #{clientID} - {row[1]}')
					print()
				print(f'{row[4]} {row[3]} {row[2]} minutes')
				remove_lines_count += 1
			else:
				keep_lines.append(row)

		if remove_lines_count == 0:
			print(f'Client #{clientID} not found')
			sys.exit(1)

	with open(hours_file, 'w') as file:
		writer = csv.writer(file)
		writer.writerows(keep_lines)

def main():
	parser = argparse.ArgumentParser(description='SDC Log time')
	sub_parsers = parser.add_subparsers(dest='command', title='commands')

	parser_open = sub_parsers.add_parser('o', help='open')
	parser_view = sub_parsers.add_parser('v', help='view')

	parser_summarize = sub_parsers.add_parser('s', help='summarize')
	parser_summarize.add_argument('-i', '--id', nargs=1, type=str, help='client id')

	parser_clientTime = sub_parsers.add_parser('ct', help='client time')
	parser_clientTime.add_argument('-i', '--id', nargs=1, required=True, type=str, help='client id')

	parser_add = sub_parsers.add_parser('add', help='add time')
	parser_add.add_argument('-i', '--id', nargs=1, required=True, type=str, help='client id')
	parser_add.add_argument('-n', '--name', nargs=1, required=True, type=str, help='client name')
	parser_add.add_argument('-t', '--time', nargs=1, required=True, type=str, help='time in minutes')

	parser_clientTime = sub_parsers.add_parser('clear', help='clear client')
	parser_clientTime.add_argument('-i', '--id', nargs=1, required=True, type=str, help='client id')

	args, unknownArgs = parser.parse_known_args()

	if args.command == 'o':
		os.system(f'open -e {hours_file}')
	elif args.command == 'v':
		os.system(f'cat {hours_file}')
	elif args.command == 's':
		if args.id:
			summarize(args.id[0])
		else:
			summarize()
	elif args.command == 'ct':
		clientTime(args.id[0])
	elif args.command == 'add':
		addRow(args.id[0], args.name[0], args.time[0])
	elif args.command == 'clear':
		clearClient(args.id[0])
	else:
		summarize()

main()
sys.exit(0)
